# -*- coding: utf-8 -*-
"""CarPricePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UXCGCPQjSDtPv5yKFsWU6Z4hrXF57B2H
"""

import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st

from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
import joblib

from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder


data = pd.read_csv('Clean Data_pakwheels.csv')
data = data.drop(data.columns[0], axis=1)# тут мы отбрасываем 1 столбец (Id) так как он будет мешать обучению
data

# Streamlit app
st.title('Car Price Prediction App')

# Form for user input
company = st.selectbox('Company Name', data['Company Name'].unique())
model_name = st.selectbox('Model Name', data['Model Name'].unique())
year = st.slider('Model Year', data['Model Year'].min(), data['Model Year'].max())
location = st.selectbox('Location', data['Location'].unique())
mileage = st.slider('Mileage', data['Mileage'].min(), data['Mileage'].max())
engine_type = st.selectbox('Engine Type', data['Engine Type'].unique())
engine_capacity = st.slider('Engine Capacity', data['Engine Capacity'].min(), data['Engine Capacity'].max())
color = st.selectbox('Color', data['Color'].unique())
assembly = st.selectbox('Assembly', data['Assembly'].unique())
body_type = st.selectbox('Body Type', data['Body Type'].unique())
transmission = st.selectbox('Transmission Type', data['Transmission Type'].unique())
registration = st.selectbox('Registration Status', data['Registration Status'].unique())

# Make prediction
input_data = {
    'Company Name': [company],
    'Model Name': [model_name],
    'Model Year': [year],
    'Location': [location],
    'Mileage': [mileage],
    'Engine Type': [engine_type],
    'Engine Capacity': [engine_capacity],
    'Color': [color],
    'Assembly': [assembly],
    'Body Type': [body_type],
    'Transmission Type': [transmission],
    'Registration Status': [registration]
}
input_df = pd.DataFrame(input_data)

text_cols = ['Company Name', 'Model Name', 'Location', 'Engine Type',
'Color', 'Assembly', 'Transmission Type', 'Registration Status', 'Body Type']

#Перевод текстовых столбцов в числовой тип
le_dict = {}
for col in text_cols:
    le = LabelEncoder()
    data[col] = le.fit_transform(data[col])
    le_dict[col] = le

#Нормализация остальных столбцов
scaler_dict = {}
for col in data.columns:
    if col not in text_cols:
        scaler = StandardScaler()
        data[col] = scaler.fit_transform(data[col].values.reshape(-1, 1))
        scaler_dict[col] = scaler


#Разпределение данных на данные и метки
x = data.drop(['Price'], axis = 1)
y = data['Price']

#Разделение тренеровочьных/тестовых данных
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 1)
data

x_train = x_train.fillna(x_train.mean())

#Создание и обучение НС
model = RandomForestRegressor().fit(x_train, y_train)
joblib.dump(model, 'model.pkl')

# Вычисление ошибки НС
mean_squared_error(y_test, model.predict(x_test))

# Load the model and transformers

for col in text_cols:
    input_df[col] = le_dict[col].transform(input_df[col])

for col in data.columns:
    if col not in text_cols and col != 'Price':
        input_df[col] = scaler_dict[col].transform(input_df[col].values.reshape(-1, 1))

prediction = model.predict(input_df)
predicted_price = scaler_dict['Price'].inverse_transform(prediction.reshape(-1, 1))[0][0]

# Display prediction
st.subheader('Prediction Result')
st.write(f'The predicted price is: {predicted_price:.2f}')